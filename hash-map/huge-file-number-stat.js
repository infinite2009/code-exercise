/*
 * @file 一个有40亿个数字的文件，请统计其中出现次数最多的数字，条件是使用的内存不超过1GB
 */

/*
 * 结题思路 哈希 + 取模 进行词频压缩，然后用 hasMap 来统计出现次数。
 * 哈希后将 40 亿个数字均匀映射到一个空间上，然后取模（例如 100)，可以将所有的数字均匀地分割到 100 个文件当中。
 * 注： 为什么必须哈希，而不能仅仅取模，是因为取模不能保证数据散列的均匀性，这使得当我们使用 HashMap 统计数字次数时，某个文件对应的 HashMap 的内存占用将超过1GB。
 * 因此，必须先使用哈希使数据在空间中的分布均匀，然后再使用取模均匀地分为 100 份。
 */

function numberStat(arr) {
    const arrs = [];
    for (let i = 1, l = arr.length; i < l; i++) {
        const mod = arr[i] % 100;
        if (!arrs[mod]) {
            arrs[mod] = [];
        }
        arrs[mod] = arr[i];
    }
}